// This code was autogenerated with `dbus-codegen-rust -s -g -m None -d org.eclipse.bluechi -p /org/eclipse/bluechi`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopDBusPeer {
    fn ping(&self) -> Result<(), dbus::Error>;
    fn get_machine_id(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusPeer for blocking::Proxy<'a, C> {

    fn ping(&self) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "Ping", ())
    }

    fn get_machine_id(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Peer", "GetMachineId", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&self) -> Result<String, dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusIntrospectable for blocking::Proxy<'a, C> {

    fn introspect(&self) -> Result<String, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Introspectable", "Introspect", ())
            .and_then(|r: (String, )| Ok(r.0, ))
    }
}

pub trait OrgFreedesktopDBusProperties {
    fn get<R0: for<'b> arg::Get<'b> + 'static>(&self, interface_name: &str, property_name: &str) -> Result<R0, dbus::Error>;
    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error>;
    fn set<I2: arg::Arg + arg::Append>(&self, interface_name: &str, property_name: &str, value: I2) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgFreedesktopDBusProperties for blocking::Proxy<'a, C> {

    fn get<R0: for<'b> arg::Get<'b> + 'static>(&self, interface_name: &str, property_name: &str) -> Result<R0, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Get", (interface_name, property_name, ))
            .and_then(|r: (arg::Variant<R0>, )| Ok((r.0).0, ))
    }

    fn get_all(&self, interface_name: &str) -> Result<arg::PropMap, dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "GetAll", (interface_name, ))
            .and_then(|r: (arg::PropMap, )| Ok(r.0, ))
    }

    fn set<I2: arg::Arg + arg::Append>(&self, interface_name: &str, property_name: &str, value: I2) -> Result<(), dbus::Error> {
        self.method_call("org.freedesktop.DBus.Properties", "Set", (interface_name, property_name, arg::Variant(value), ))
    }
}

pub trait OrgEclipseBluechiShutdown {
    fn shutdown(&self) -> Result<(), dbus::Error>;
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgEclipseBluechiShutdown for blocking::Proxy<'a, C> {

    fn shutdown(&self) -> Result<(), dbus::Error> {
        self.method_call("org.eclipse.bluechi.Shutdown", "Shutdown", ())
    }
}

pub trait OrgEclipseBluechiManager {
    fn ping(&self, arg0: &str) -> Result<String, dbus::Error>;
    fn list_units(&self) -> Result<Vec<(String, String, String, String, String, String, String, dbus::Path<'static>, u32, String, dbus::Path<'static>)>, dbus::Error>;
    fn list_nodes(&self) -> Result<Vec<(String, dbus::Path<'static>, String)>, dbus::Error>;
    fn get_node(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error>;
    fn create_monitor(&self) -> Result<dbus::Path<'static>, dbus::Error>;
    fn set_log_level(&self, arg0: &str) -> Result<(), dbus::Error>;
    fn enable_metrics(&self) -> Result<(), dbus::Error>;
    fn disable_metrics(&self) -> Result<(), dbus::Error>;
}

#[derive(Debug)]
pub struct OrgEclipseBluechiManagerJobNew {
    pub id: u32,
    pub job: dbus::Path<'static>,
}

impl arg::AppendAll for OrgEclipseBluechiManagerJobNew {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.job, i);
    }
}

impl arg::ReadAll for OrgEclipseBluechiManagerJobNew {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgEclipseBluechiManagerJobNew {
            id: i.read()?,
            job: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgEclipseBluechiManagerJobNew {
    const NAME: &'static str = "JobNew";
    const INTERFACE: &'static str = "org.eclipse.bluechi.Manager";
}

#[derive(Debug)]
pub struct OrgEclipseBluechiManagerJobRemoved {
    pub id: u32,
    pub job: dbus::Path<'static>,
    pub node: String,
    pub unit: String,
    pub result: String,
}

impl arg::AppendAll for OrgEclipseBluechiManagerJobRemoved {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.id, i);
        arg::RefArg::append(&self.job, i);
        arg::RefArg::append(&self.node, i);
        arg::RefArg::append(&self.unit, i);
        arg::RefArg::append(&self.result, i);
    }
}

impl arg::ReadAll for OrgEclipseBluechiManagerJobRemoved {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgEclipseBluechiManagerJobRemoved {
            id: i.read()?,
            job: i.read()?,
            node: i.read()?,
            unit: i.read()?,
            result: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgEclipseBluechiManagerJobRemoved {
    const NAME: &'static str = "JobRemoved";
    const INTERFACE: &'static str = "org.eclipse.bluechi.Manager";
}

#[derive(Debug)]
pub struct OrgEclipseBluechiManagerNodeConnectionStateChanged {
    pub node: String,
    pub connection_state: String,
}

impl arg::AppendAll for OrgEclipseBluechiManagerNodeConnectionStateChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.node, i);
        arg::RefArg::append(&self.connection_state, i);
    }
}

impl arg::ReadAll for OrgEclipseBluechiManagerNodeConnectionStateChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgEclipseBluechiManagerNodeConnectionStateChanged {
            node: i.read()?,
            connection_state: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgEclipseBluechiManagerNodeConnectionStateChanged {
    const NAME: &'static str = "NodeConnectionStateChanged";
    const INTERFACE: &'static str = "org.eclipse.bluechi.Manager";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target=T>> OrgEclipseBluechiManager for blocking::Proxy<'a, C> {

    fn ping(&self, arg0: &str) -> Result<String, dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "Ping", (arg0, ))
            .and_then(|r: (String, )| Ok(r.0, ))
    }

    fn list_units(&self) -> Result<Vec<(String, String, String, String, String, String, String, dbus::Path<'static>, u32, String, dbus::Path<'static>)>, dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "ListUnits", ())
            .and_then(|r: (Vec<(String, String, String, String, String, String, String, dbus::Path<'static>, u32, String, dbus::Path<'static>)>, )| Ok(r.0, ))
    }

    fn list_nodes(&self) -> Result<Vec<(String, dbus::Path<'static>, String)>, dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "ListNodes", ())
            .and_then(|r: (Vec<(String, dbus::Path<'static>, String)>, )| Ok(r.0, ))
    }

    fn get_node(&self, arg0: &str) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "GetNode", (arg0, ))
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn create_monitor(&self) -> Result<dbus::Path<'static>, dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "CreateMonitor", ())
            .and_then(|r: (dbus::Path<'static>, )| Ok(r.0, ))
    }

    fn set_log_level(&self, arg0: &str) -> Result<(), dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "SetLogLevel", (arg0, ))
    }

    fn enable_metrics(&self) -> Result<(), dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "EnableMetrics", ())
    }

    fn disable_metrics(&self) -> Result<(), dbus::Error> {
        self.method_call("org.eclipse.bluechi.Manager", "DisableMetrics", ())
    }
}
